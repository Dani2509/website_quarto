{
  "hash": "cac9b07c0d27fc38413eb062ad425a28",
  "result": {
    "markdown": "---\ntitle: \"**Â¿CÃ³mo abrir bases de datos en R y observar su estructura?**\"\ndescription: |\n  Bases de datos en formato .csv, .xlsx, .txt\nauthor:\n  - name: Daniela O. \ndate: 2023-06-10\ncategories: [Tips, bases de datos]\nimage: open_data.jpg\ntitle-block-banner: false\n---\n\n\n![](open_data.jpg)\n\nAntes de empezar con la exploraciÃ³n de los datos. Debemos aprender a leer los datos y conocer su estructura; cuÃ¡ntas observaciones tenemos, nÃºmero de columnas y que variables son cuantitativas y cuales cualitativas.\n\n## Abriendo bases de datos\n\nEn el panel del `Enviroment` nos dirigimos a la opciÃ³n `Import Dataset` y seleccionamos el tipo de archivo, si es un documento `.xlsx, .txt o csv`. Esto nos abrirÃ¡ una ventana emergente y seleccionaremos nuestra base de datos a visualizar.\n\n![](fig-1.jpg){width=\"80%\"}\n\nEn esta ventana emergente, una vez que tengamos seleccionada nuestra base de datos procedemos a copiar el cÃ³digo que aparece en la parte inferior y lo pegamos en nuestro script. AsÃ­ cada vez que quieras abrir la base de datos solo debes correr el cÃ³digo.\n\n![](fig-2.jpg){width=\"80%\"}\n\n::: callout-note\n## Nota\n\nCuando le das en `Import Dataset` `From text (base)` es para archivos en formato `.txt` y `From Text (readr)` es para archivos .`csv` en el que las columnas estÃ¡n separadas por puntos y no comas.\n:::\n\n## Abriendo bases de datos con cÃ³digo\n\nTambiÃ©n puedes abrir bases de datos escribiendo el siguiente cÃ³digo en tu script\n\n### Datos de Excel\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n\n# pegas la ruta de la carpeta en donde esta el archivo \n# setwd(\"ruta de la carpeta donde esta el archivo\")\n```\n:::\n\n\nCuando pegas la ruta cambia el signo `\\` por este `/`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n# luego ejecutas el siguiente comando\ndatos<- read_excel(\"Iris.xlsx\") # <1>\n\n# observar la estructura de nuetro dataset\nstr(datos) # <2>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [150 Ã— 6] (S3: tbl_df/tbl/data.frame)\n $ Species_No  : num [1:150] 1 1 1 1 1 1 1 1 1 1 ...\n $ Petal_width : num [1:150] 0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Petal_length: num [1:150] 1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Sepal_width : num [1:150] 3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Sepal_length: num [1:150] 5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Species_name: chr [1:150] \"Setosa\" \"Setosa\" \"Setosa\" \"Setosa\" ...\n```\n:::\n:::\n\n\n1.  Entre parÃ©ntesis agregas el nombre de la base de datos\n2.  Otra opciÃ³n para observar la estructura es `glimpse()`\n\n### Datos CSV\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4     âœ” readr     2.1.5\nâœ” forcats   1.0.0     âœ” stringr   1.5.1\nâœ” ggplot2   3.5.0     âœ” tibble    3.2.1\nâœ” lubridate 1.9.3     âœ” tidyr     1.3.0\nâœ” purrr     1.0.2     \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ndatos<- read.csv2(\"Iris.csv\", header = TRUE)\n```\n:::\n\n\n### Datos en extensiÃ³n .txt\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read.table(file = \"Iris.txt\", header = TRUE)\nhead(data) # <3> \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Species_No Petal_width Petal_length Sepal_width Sepal_length Species_name\n1          1         0,2          1,4         3,5          5,1       Setosa\n2          1         0,2          1,4           3          4,9       Setosa\n3          1         0,2          1,3         3,2          4,7       Setosa\n4          1         0,2          1,5         3,1          4,6       Setosa\n5          1         0,2          1,4         3,6            5       Setosa\n6          1         0,4          1,7         3,9          5,4       Setosa\n```\n:::\n:::\n\n\n3.  Con este comando puedes observar las 6 primeras filas del dataset\n\nEspero que te haya servido de ayuda estos consejos ðŸ˜€\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}